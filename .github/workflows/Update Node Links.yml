name: Update Node Links

on:
  schedule:
    - cron: '15 */1 * * *'  # 每1小时自动运行一次
  workflow_dispatch:  # 支持手动触发

jobs:
  update-nodes:
    runs-on: ubuntu-latest

    steps:
    # 检出代码库
    - name: Checkout repository
      uses: actions/checkout@v3

    # 获取网页内容并保存为文件，去掉 HTML 标签
    - name: Fetch and Clean Webpage Content
      run: |
        VMESS_URL="https://github.com/Alvin9999/new-pac/wiki/v2ray%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7"
        SS_URL="https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7"
        
        # 获取网页内容，去掉 HTML 标签，并保存为纯文本文件
        curl -s "$VMESS_URL" | sed 's/<[^>]*>//g' > webpage_content.txt
        curl -s "$SS_URL" | sed 's/<[^>]*>//g' > ss_webpage_content.txt
        echo "Webpage content cleaned and saved."

    # 获取原始文件内容（确保在文件更新前先保存它们）
    - name: Get original file contents
      id: get_original
      run: |
        ORIGINAL_DIZHI1=$(cat dizhi1.txt)
        ORIGINAL_DIZHI2=$(cat dizhi2.txt)
        ORIGINAL_DIZHI3=$(cat dizhi3.txt)
        echo "original_dizhi1=$ORIGINAL_DIZHI1" >> $GITHUB_ENV
        echo "original_dizhi2=$ORIGINAL_DIZHI2" >> $GITHUB_ENV
        echo "original_dizhi3=$ORIGINAL_DIZHI3" >> $GITHUB_ENV

    # 从保存的完整网页内容中提取并更新节点信息
    - name: Fetch and Update Nodes from Content Files
      run: |
        VMESS_NODES=$(grep -oP '.*vmess://\S+' webpage_content.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/&amp;/\&/g' | sort -u)
        VLESS_NODES=$(grep -oP '.*vless://\S+' webpage_content.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/&amp;/\&/g' | sort -u)
        SS_NODES=$(grep -oP '.*ss://\S+' ss_webpage_content.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/&amp;/\&/g' | sort -u)

        # 保存提取的节点链接到文件
        echo "$VMESS_NODES" > dizhi1.txt
        echo "$VLESS_NODES" > dizhi2.txt
        echo "$SS_NODES" > dizhi3.txt
        echo "Node data saved to files."

    # 将 .txt 文件转换为 .html 文件，并粘贴到 myalvinpages 文件夹中
    - name: Convert TXT files to HTML and move to myalvinpages
      run: |
        # 确保 myalvinpages 目录存在
        mkdir -p myalvinpages

        # 创建一个 HTML 文件转换模板
        convert_to_html() {
          input_file=$1
          output_file=$2
          echo "<html><body><pre>" > "$output_file"
          cat "$input_file" >> "$output_file"
          echo "</pre></body></html>" >> "$output_file"
        }

        # 转换文件并粘贴到 myalvinpages 文件夹中
        convert_to_html dizhi1.txt myalvinpages/dizhi1.html
        convert_to_html dizhi2.txt myalvinpages/dizhi2.html
        convert_to_html dizhi3.txt myalvinpages/dizhi3.html
        echo "TXT files converted to HTML and moved to myalvinpages/."

    # 推送文件到 GitHub
    - name: Push changes to GitHub
      run: |
        # 配置 Git 用户信息
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # 添加所有更改的文件
        git add dizhi1.txt dizhi2.txt dizhi3.txt ss_webpage_content.txt webpage_content.txt myalvinpages/dizhi1.html myalvinpages/dizhi2.html myalvinpages/dizhi3.html
        # 提交更改
        git commit -m "Update nodes data and HTML files"
        git push

    # 检查文件是否有变化并部署网页
    - name: Check if files have changed and deploy
      run: |
        NEW_DIZHI1=$(cat dizhi1.txt)
        NEW_DIZHI2=$(cat dizhi2.txt)
        NEW_DIZHI3=$(cat dizhi3.txt)

        if [[ "$NEW_DIZHI1" != "$original_dizhi1" || "$NEW_DIZHI2" != "$original_dizhi2" || "$NEW_DIZHI3" != "$original_dizhi3" ]]; then
          echo "Files have changed. Deploying updated content to GitHub Pages..."

          # 上传文件到 GitHub Pages，只需在有更新时进行
          git add myalvinpages/
          git commit -m "Deploy updated content to GitHub Pages"
          git push

          echo "Deployment to GitHub Pages completed."
        else
          echo "No changes detected. Skipping deployment."
        fi
